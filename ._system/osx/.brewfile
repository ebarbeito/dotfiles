tap "buo/cask-upgrade"
tap "homebrew/aliases"
tap "homebrew/bundle"

brew "ack"
brew "asciinema"
brew "autoconf"
brew "automake"
brew "bash"
brew "bash-completion@2"
brew "bat"
brew "binutils"
brew "brew-cask-completion"
brew "calc"
brew "cloc"
brew "cmatrix"
brew "colordiff"
brew "coreutils"
brew "curl"
brew "diffutils"
brew "docker-clean"
brew "ed"
brew "exiftool"
brew "ffmpeg"
brew "figlet"
brew "findutils"
brew "fortune"
brew "fzf"
brew "gawk"
brew "git"
brew "git-extras"
brew "git-gui"
brew "gnu-getopt"
brew "gnu-indent"
brew "gnu-sed"
brew "gnu-tar"
brew "gnu-time"
brew "gnu-units"
brew "gnu-which"
brew "gnutls"
brew "gpatch"
brew "graphicsmagick"
brew "grep"
brew "gzip"
brew "htop"
brew "imagemagick"
brew "inetutils"
brew "irssi"
brew "java"
brew "jq"
brew "launchctl-completion"
brew "less"
brew "lynx"
brew "make"
brew "mysql-client"
brew "multitail"
brew "nmap"
brew "p7zip"
brew "pidof"
brew "pipx"
brew "pstree"
brew "python"
brew "rename"
brew "rsync"
brew "screen"
brew "speedtest-cli"
brew "tldr"
brew "tree"
brew "vim"
brew "watch"
brew "wdiff"
brew "wget"
brew "wrk"
brew "xz"
brew "youtube-dl"

cask "alacritty"
cask "android-file-transfer"
cask "anki"
cask "brave-browser"
cask "deepl"
cask "devtoys"
cask "docker"
cask "dropbox"
cask "firefox-developer-edition"
cask "flycut"
cask "gimp"
cask "hiddenbar"
cask "iterm2"
cask "itsycal"
cask "lastfm"
cask "libreoffice"
cask "libreoffice-language-pack"
cask "licecap"
cask "macdown"
cask "opera@developer"
cask "phpstorm"
cask "poedit"
cask "postman"
cask "qlcolorcode"
cask "qlimagesize"
cask "qlmarkdown"
cask "qlprettypatch"
cask "qlstephen"
cask "qlvideo"
cask "quicklook-csv"
cask "quicklook-json"
cask "rectangle"
cask "signal"
cask "skype"
cask "slack"
cask "spotify"
cask "stats"
cask "sublime-text"
cask "syncthing"
cask "tomighty"
cask "transmission"
cask "typora"
cask "utm"
cask "visual-studio-code"
cask "vlc"
cask "webpquicklook"
cask "zoom"

# include an additional custom Brewfile
filepath = File.expand_path("~/.dotfiles/._system/custom/.brewfile")
if File.exist?(filepath)
  instance_eval(File.read(filepath))
end

